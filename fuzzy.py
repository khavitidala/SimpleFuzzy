# -*- coding: utf-8 -*-
"""fuzzy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zS7pFGQZom3Xdnp_QyYZpxtZFGaI01_F
"""

#from openpyxl import load_workbook
import numpy as np
import matplotlib.pyplot as plt
 
#data = load_workbook('restoran.xlsx')
#wsData = data.active

crispList = [{'id': 1, 'pelayanan': 58, 'makanan': 7},
 {'id': 2, 'pelayanan': 54, 'makanan': 1},
 {'id': 3, 'pelayanan': 98, 'makanan': 2},
 {'id': 4, 'pelayanan': 52, 'makanan': 4},
 {'id': 5, 'pelayanan': 11, 'makanan': 4},
 {'id': 6, 'pelayanan': 59, 'makanan': 10},
 {'id': 7, 'pelayanan': 61, 'makanan': 8},
 {'id': 8, 'pelayanan': 30, 'makanan': 10},
 {'id': 9, 'pelayanan': 45, 'makanan': 1},
 {'id': 10, 'pelayanan': 36, 'makanan': 9},
 {'id': 11, 'pelayanan': 10, 'makanan': 5},
 {'id': 12, 'pelayanan': 38, 'makanan': 7},
 {'id': 13, 'pelayanan': 80, 'makanan': 3},
 {'id': 14, 'pelayanan': 31, 'makanan': 8},
 {'id': 15, 'pelayanan': 78, 'makanan': 5},
 {'id': 16, 'pelayanan': 82, 'makanan': 6},
 {'id': 17, 'pelayanan': 70, 'makanan': 3},
 {'id': 18, 'pelayanan': 3, 'makanan': 9},
 {'id': 19, 'pelayanan': 42, 'makanan': 3},
 {'id': 20, 'pelayanan': 49, 'makanan': 10},
 {'id': 21, 'pelayanan': 48, 'makanan': 2},
 {'id': 22, 'pelayanan': 79, 'makanan': 9},
 {'id': 23, 'pelayanan': 18, 'makanan': 4},
 {'id': 24, 'pelayanan': 100, 'makanan': 9},
 {'id': 25, 'pelayanan': 61, 'makanan': 10},
 {'id': 26, 'pelayanan': 4, 'makanan': 2},
 {'id': 27, 'pelayanan': 59, 'makanan': 8},
 {'id': 28, 'pelayanan': 44, 'makanan': 3},
 {'id': 29, 'pelayanan': 11, 'makanan': 8},
 {'id': 30, 'pelayanan': 7, 'makanan': 6},
 {'id': 31, 'pelayanan': 74, 'makanan': 9},
 {'id': 32, 'pelayanan': 42, 'makanan': 3},
 {'id': 33, 'pelayanan': 33, 'makanan': 8},
 {'id': 34, 'pelayanan': 93, 'makanan': 4},
 {'id': 35, 'pelayanan': 4, 'makanan': 1},
 {'id': 36, 'pelayanan': 32, 'makanan': 6},
 {'id': 37, 'pelayanan': 31, 'makanan': 4},
 {'id': 38, 'pelayanan': 10, 'makanan': 1},
 {'id': 39, 'pelayanan': 52, 'makanan': 7},
 {'id': 40, 'pelayanan': 7, 'makanan': 6},
 {'id': 41, 'pelayanan': 33, 'makanan': 2},
 {'id': 42, 'pelayanan': 94, 'makanan': 10},
 {'id': 43, 'pelayanan': 34, 'makanan': 3},
 {'id': 44, 'pelayanan': 63, 'makanan': 2},
 {'id': 45, 'pelayanan': 3, 'makanan': 8},
 {'id': 46, 'pelayanan': 38, 'makanan': 1},
 {'id': 47, 'pelayanan': 21, 'makanan': 3},
 {'id': 48, 'pelayanan': 64, 'makanan': 4},
 {'id': 49, 'pelayanan': 19, 'makanan': 1},
 {'id': 50, 'pelayanan': 42, 'makanan': 5},
 {'id': 51, 'pelayanan': 48, 'makanan': 10},
 {'id': 52, 'pelayanan': 94, 'makanan': 3},
 {'id': 53, 'pelayanan': 21, 'makanan': 6},
 {'id': 54, 'pelayanan': 64, 'makanan': 10},
 {'id': 55, 'pelayanan': 50, 'makanan': 7},
 {'id': 56, 'pelayanan': 49, 'makanan': 3},
 {'id': 57, 'pelayanan': 24, 'makanan': 3},
 {'id': 58, 'pelayanan': 31, 'makanan': 1},
 {'id': 59, 'pelayanan': 28, 'makanan': 4},
 {'id': 60, 'pelayanan': 79, 'makanan': 6},
 {'id': 61, 'pelayanan': 42, 'makanan': 4},
 {'id': 62, 'pelayanan': 31, 'makanan': 7},
 {'id': 63, 'pelayanan': 78, 'makanan': 7},
 {'id': 64, 'pelayanan': 35, 'makanan': 2},
 {'id': 65, 'pelayanan': 3, 'makanan': 8},
 {'id': 66, 'pelayanan': 4, 'makanan': 9},
 {'id': 67, 'pelayanan': 27, 'makanan': 4},
 {'id': 68, 'pelayanan': 59, 'makanan': 5},
 {'id': 69, 'pelayanan': 86, 'makanan': 10},
 {'id': 70, 'pelayanan': 78, 'makanan': 8},
 {'id': 71, 'pelayanan': 39, 'makanan': 3},
 {'id': 72, 'pelayanan': 26, 'makanan': 6},
 {'id': 73, 'pelayanan': 22, 'makanan': 10},
 {'id': 74, 'pelayanan': 54, 'makanan': 4},
 {'id': 75, 'pelayanan': 61, 'makanan': 1},
 {'id': 76, 'pelayanan': 45, 'makanan': 5},
 {'id': 77, 'pelayanan': 11, 'makanan': 10},
 {'id': 78, 'pelayanan': 20, 'makanan': 1},
 {'id': 79, 'pelayanan': 87, 'makanan': 9},
 {'id': 80, 'pelayanan': 39, 'makanan': 10},
 {'id': 81, 'pelayanan': 4, 'makanan': 10},
 {'id': 82, 'pelayanan': 13, 'makanan': 4},
 {'id': 83, 'pelayanan': 69, 'makanan': 8},
 {'id': 84, 'pelayanan': 11, 'makanan': 2},
 {'id': 85, 'pelayanan': 18, 'makanan': 4},
 {'id': 86, 'pelayanan': 30, 'makanan': 5},
 {'id': 87, 'pelayanan': 56, 'makanan': 4},
 {'id': 88, 'pelayanan': 18, 'makanan': 9},
 {'id': 89, 'pelayanan': 48, 'makanan': 2},
 {'id': 90, 'pelayanan': 10, 'makanan': 1},
 {'id': 91, 'pelayanan': 98, 'makanan': 3},
 {'id': 92, 'pelayanan': 83, 'makanan': 3},
 {'id': 93, 'pelayanan': 40, 'makanan': 8},
 {'id': 94, 'pelayanan': 20, 'makanan': 3},
 {'id': 95, 'pelayanan': 63, 'makanan': 8},
 {'id': 96, 'pelayanan': 30, 'makanan': 1},
 {'id': 97, 'pelayanan': 25, 'makanan': 3},
 {'id': 98, 'pelayanan': 27, 'makanan': 10},
 {'id': 99, 'pelayanan': 8, 'makanan': 6},
 {'id': 100, 'pelayanan': 11, 'makanan': 8}]
fuzzyInput = {
    "pelayanan" : [],
    "makanan" : []
}
l = {
    "vwp" : [0, 0, 10, 20],
    "wp" : [10, 25, 25, 40],
    "lmp" : [30, 40, 40, 50],
    "hmp" : [40, 55, 55, 70],
    "sp" : [60, 70, 70, 80],
    "vsp" : [70, 80, 80, 90],
    "ep" : [80, 90, 100, 100]
}
l2 = {
    "vwp" : [0, 0, 1, 2],
    "wp" : [1, 2.5, 2.5, 4],
    "lmp" : [3, 4, 4, 5],
    "hmp" : [4, 5.5, 5.5, 7],
    "sp" : [6, 7, 7, 8],
    "vsp" : [7, 8, 8, 9],
    "ep" : [8, 9, 10, 10]
}

'''
for i in range(2, 102):
    cr = {}
    d = wsData.cell(row=i, column=1)
    cr["id"] = d.value
    d = wsData.cell(row=i, column=2)
    cr["pelayanan"] = d.value
    d = wsData.cell(row=i, column=3)
    cr["makanan"] = d.value
    crispList.append(cr)
'''

"""# Fuzzification"""

def trapezoid(id, x, jenis):
    batas = {}
    fuzz = {
        "id" : id,
        "crisp" : x,
        "fuz" : {}
    }
    if jenis == "pelayanan":
        for k,v in l.items():
            if v[0]<=x<=v[-1]:
                batas[k] = v
    elif jenis == "makanan":
        for k,v in l2.items():
            if v[0]<=x<=v[-1]:
                batas[k] = v
    for k, v in batas.items():
        a, b, c, d = v[0], v[1], v[2], v[3]
        if a<=x<=b:
          temp = (x-a)/(b-a)
        elif b<=x<=c:
          temp = 1
        elif c<=x<=d:
          temp = (x-d)/(c-d)
        if temp > 0:
          fuzz["fuz"][k] = temp
    return fuzz

def membershipFunctions():
    for i in crispList:
        fuzzyInput["pelayanan"].append(trapezoid(i["id"], i["pelayanan"], "pelayanan"))
        fuzzyInput["makanan"].append(trapezoid(i["id"], i["makanan"], "makanan"))

membershipFunctions()

def traps(ax, batas):
    a, b, c, d = batas[0], batas[1], batas[2], batas[3]
    tmp = np.array([])
    for x in ax:
        if x<a or x>d:
            tmp = np.append(tmp, 0)
        elif a<=x<=b:
            tmp = np.append(tmp, (x-a)/(b-a))
        elif b<=x<=c:
            tmp = np.append(tmp, 1)
        elif c<=x<=d:
            tmp = np.append(tmp, (x-d)/(c-d))
    return tmp
"""
Visualization of Membership Function
for k, v in l.items():
    x = np.linspace(v[0], v[-1], 500)
    plt.plot(x, traps(x, v), label= k)
plt.legend(loc='best')
plt.show()

for k, v in l2.items():
    x = np.linspace(v[0], v[-1], 500)
    plt.plot(x, traps(x, v), label= k)
plt.legend(loc='best')
plt.show()
"""
"""# Inference"""

def MamdaniInference(id):
  fuzzyOutput = {
      "fuzOut" : {}
  }
  for k,v in fuzzyInput["pelayanan"][id]["fuz"].items():
    for k1,v1 in fuzzyInput["makanan"][id]["fuz"].items():
      sem = fuzzy_rules(k, k1)
      derajat_rendah = min(v,v1)
      fuzzyOutput["id"] = id + 1 
      if len(fuzzyOutput["fuzOut"]) == 0:
        fuzzyOutput["fuzOut"][sem] = derajat_rendah
      else:
        if sem in fuzzyOutput["fuzOut"]:
          fuzzyOutput["fuzOut"][sem] = max(derajat_rendah,fuzzyOutput["fuzOut"][sem])
        else:
          fuzzyOutput["fuzOut"][sem] = derajat_rendah
  return fuzzyOutput

def fuzzy_rules(a,b):
  if a == 'vwp' and b == 'vwp':
    return 'vwp'
  elif a == 'vwp' and b == 'wp':
    return 'vwp'
  elif a == 'vwp' and b == 'lmp':
    return 'wp'
  elif a == 'vwp' and b == 'hmp':
    return 'wp'
  elif a == 'vwp' and b == 'sp':
    return 'lmp'
  elif a == 'vwp' and b == 'vsp':
    return 'hmp'
  elif a == 'vwp' and b == 'ep':
    return 'hmp'
  ######################
  if a == 'wp' and b == 'vwp':
    return 'vwp'
  elif a == 'wp' and b == 'wp':
    return 'vwp'
  elif a == 'wp' and b == 'lmp':
    return 'wp'
  elif a == 'wp' and b == 'hmp':
    return 'lmp'
  elif a == 'wp' and b == 'sp':
    return 'lmp'
  elif a == 'wp' and b == 'vsp':
    return 'hmp'
  elif a == 'wp' and b == 'ep':
    return 'sp'
  ######################
  if a == 'lmp' and b == 'vwp':
    return 'wp'
  elif a == 'lmp' and b == 'wp':
    return 'wp'
  elif a == 'lmp' and b == 'lmp':
    return 'lmp'
  elif a == 'lmp' and b == 'hmp':
    return 'lmp'
  elif a == 'lmp' and b == 'sp':
    return 'hmp'
  elif a == 'lmp' and b == 'vsp':
    return 'hmp'
  elif a == 'lmp' and b == 'ep':
    return 'sp'
  #####################
  if a == 'hmp' and b == 'vwp':
    return 'wp'
  elif a == 'hmp' and b == 'wp':
    return 'lmp'
  elif a == 'hmp' and b == 'lmp':
    return 'hmp'
  elif a == 'hmp' and b == 'hmp':
    return 'hmp'
  elif a == 'hmp' and b == 'sp':
    return 'sp'
  elif a == 'hmp' and b == 'vsp':
    return 'sp'
  elif a == 'hmp' and b == 'ep':
    return 'vsp'
  ########################
  if a == 'sp' and b == 'vwp':
    return 'lmp'
  elif a == 'sp' and b == 'wp':
    return 'lmp'
  elif a == 'sp' and b == 'lmp':
    return 'hmp'
  elif a == 'sp' and b == 'hmp':
    return 'hmp'
  elif a == 'sp' and b == 'sp':
    return 'sp'
  elif a == 'sp' and b == 'vsp':
    return 'sp'
  elif a == 'sp' and b == 'ep':
    return 'vsp'
  ########################
  if a == 'vsp' and b == 'vwp':
    return 'hmp'
  elif a == 'vsp' and b == 'wp':
    return 'hmp'
  elif a == 'vsp' and b == 'lmp':
    return 'hmp'
  elif a == 'vsp' and b == 'hmp':
    return 'sp'
  elif a == 'vsp' and b == 'sp':
    return 'sp'
  elif a == 'vsp' and b == 'vsp':
    return 'vsp'
  elif a == 'vsp' and b == 'ep':
    return 'vsp'
  #########################
  if a == 'ep' and b == 'vwp':
    return 'hmp'
  elif a == 'ep' and b == 'wp':
    return 'sp'
  elif a == 'ep' and b == 'lmp':
    return 'sp'
  elif a == 'ep' and b == 'hmp':
    return 'sp'
  elif a == 'ep' and b == 'sp':
    return 'vsp'
  elif a == 'ep' and b == 'vsp':
    return 'vsp'
  elif a == 'ep' and b == 'ep':
    return 'ep'

lis = []
for i in range(0,100):
  lis.append(MamdaniInference(i))
#output adalah list yang berisi dictionary, dalam dictionary ada nilai fuzzy output untuk masing2 id

"""# Defuzzification"""

def trapezoidal(id, x, batas):
  temp = 0
  a, b, c, d = batas[0], batas[1], batas[2], batas[3]
  if x<a or x>d:
    temp = 0
  elif a<x<=b:
    temp = (x-a)/(b-a)
  elif b<=x<=c:
    temp = 1
  elif c<=x<=d:
    temp = (x-d)/(c-d)
  return temp

for idx in range(0, 100):
  atas = 0
  bawah = 0
  for k, v in lis[idx]["fuzOut"].items():
    sum = 0 
    enum = 0
    for i in range(l[k][0], l[k][-1]+1):
      tmp = trapezoidal(lis[idx]["id"], i, l[k])
      if tmp <= v:
        sum += i
        enum += 1
        #lis[idx]["x"].append(i)
    mult = sum * v
    atas += mult
    jum = enum * v
    bawah += jum
  lis[idx]["x"] = atas/bawah

for i in range(len(lis)):
  mx = 0
  idxMax = 0
  for j in range(i, len(lis)):
    if lis[j]["x"] > mx:
      idxMax = j
      mx = lis[j]["x"]
  lis[i], lis[idxMax] = lis[idxMax], lis[i]

print(np.asarray(lis))